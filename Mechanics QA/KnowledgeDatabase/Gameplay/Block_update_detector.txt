The Block Update Detector, or "BUD switch", is a redstone mechanism that exploits bugs and quirks in the game in order to detect changes in nearby blocks. There are many different designs, but they are all based on the same general idea: a redstone circuit is put in a state that should be unstable, but is stable due to some block within not being notified of changes in the circuit that would otherwise affect it. This lazy block then functions as the "sensor." When an adjacent block changes state in some way, it sends a notification to the sensor block and "wakes it up." The circuit then performs some other action and goes back into the sleeping state. .
The BUD switch detects the following events when they happen next to the sensor block Placement of blocks.
The BUD switch detects the following events when they happen next to the sensor block Destruction of blocks.
The BUD switch detects the following events when they happen next to the sensor block Re-flowing of water or lava.
The BUD switch detects the following events when they happen next to the sensor block Freezing of water or melting of ice.
The BUD switch detects the following events when they happen next to the sensor block Gravel or sand landing from a fall.
The BUD switch detects the following events when they happen next to the sensor block Movement of blocks by pistons, and the movement of pistons themselves.
The BUD switch detects the following events when they happen next to the sensor block Endermen picking up and putting down blocks.
The BUD switch detects the following events when they happen next to the sensor block Growth of plants, including: cacti, carrots, flowers, grass, melons and melon stems, mushrooms, potatoes, pumpkins and pumpkin stems, sugar canes, wheat and any new upcoming plants in updates. (Not cocoa beans or vines).
The BUD switch detects the following events when they happen next to the sensor block Leaf growth and decay.
The BUD switch detects the following events when they happen next to the sensor block Growth and death of grass blocks.
The BUD switch detects the following events when they happen next to the sensor block Dirt becoming farmland, farmland becoming hydrated, farmland reverting to dirt (but this can be more easily detected with a repeater).
The BUD switch detects the following events when they happen next to the sensor block Fire igniting or burning out.
The BUD switch detects the following events when they happen next to the sensor block Redstone ore starting to glow, or stopping.
The BUD switch detects the following events when they happen next to the sensor block Changes in redstone state or power level, and activation of redstone devices.
The BUD switch detects the following events when they happen next to the sensor block Setting the delay on a repeater.
The BUD switch detects the following events when they happen next to the sensor block A furnace starting to smelt, or finishing.
The BUD switch detects the following events when they happen next to the sensor block Rails changing orientation.
The BUD switch detects the following events when they happen next to the sensor block TNT igniting and becoming an entity.
The BUD switch detects the following events when they happen next to the sensor block Silverfish entering a block.
The BUD switch detects the following events when they happen next to the sensor block Cake being eaten.
The BUD switch detects the following events when they happen next to the sensor block Opening or closing of a chest (or a trapped chest).
The BUD switch detects the following events when they happen next to the sensor block Activation of tripwire, even if not attached to a tripwire hook.
The BUD switch detects the following events when they happen next to the sensor block Sleeping in a bed.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Grass blocks changing to dirt due to sheep "eating" the grass.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Opening or closing a door, trapdoor, or fence gate.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Inserting or removing music discs from a jukebox.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Placing an eye of ender in an end portal block.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Nether wart growth.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Natural tree growth (tree growth forced by bonemeal can be detected).
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Changing the water level of a cauldron with a glass bottle or water bucket.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Placement of a glass bottle (empty or filled) in a brewing stand.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include An anvil becoming slightly damaged or very damaged.
Block and block state changes a BUD will not detect (some of them can be detected when a CUD is used) include Growth of vines or cocoa beans.
Below is a comprehensive video from SethBling, which showcases a variety of compact block update detectors, mostly making use of the redstone block.
This BUD switch takes advantage of the fact that water flows toward the nearest hole, but it doesn't notice new holes until it is updated for some other reason. The water source block acts as the sensor. This design is outdated and is more complicated than newer designs.
This variation is simpler but not resettable.
Many BUD switch designs exploit a property of pistons call quasi-connectivity. A piston can receive power through the space directly above it, as if it were two blocks high. In this case, the power source is either above and to the side of the piston, or two blocks above it. However, when powered in this way, the piston does not immediately notice changes in the state of the power source. When some other block update happens next to the piston, it will "wake up" and react to the change. By forming a feedback loop, where the state of the piston controls the state of its power source, it becomes the sensor of a simple BUD switch.
In this design, the piston will only extend in response to an adjacent block update, but after extending it will immediately retract because the arm of the piston notices the repeater next to it turning off. This is how a piston BUD resets itself: by having the power run next to the extended piston arm, with a delay.
Note: If the block diagonally adjacent to the sticky piston becomes horizontally adjacent, the circuit will constantly pulse instead.
This design can be extended with multiple sensor blocks. All of the pistons in this design are sensors.
A 1-wide tileable design using redstone blocks.
Alternative method: if you take a sticky piston facing parallel to the ground, then place a Block of Redstone on its face, and connect the Block of Redstone out to the side of the piston through a repeater that goes into a block diagonally adjacent to the piston, it works a fully functional BUD in 1.5. Then, if you set a delay of any number of ticks other than the default 1-tick delay on the repeater, it turns into a T-BUD. This process can also be reversed by setting the repeater back to its default 1-tick setting. (only works since release of Redstone Blocks, though you could theoretically use a normal block and a Redstone Torch to mimic it's effects).
An extremely compact one-time design that is easily hidden and therefore ideal for traps is as follows: Place a piston, a sticky piston is most useful, parallel to the ground. Place a block one block to any side except the piston head and one block above the piston. On the side of the block facing the piston, place a redstone torch. Then place a lever on any other side of the block and switch it on. The redstone torch will go out but the piston will remain extended. You can then break everything except for the piston, but make sure to break the lever after you break the torch. A block update will then cause the piston to retract, possibly pulling the floor out from under the victim. Remember, though, that after the detector is tripped, it has to be rebuilt to be used again.
The design looks something like this.
Or, for it being smaller: You can make a 2x1 (3x1 when extended) BUD by having a 2 sticky pistons (stacked) both facing any direction except up and down, then on both of those sticky pistons add Redstone Blocks. Whenever a block is updated, (destroyed, placed... etc.) it will switch the bottom piston outwards. Good for traps, as the BUD may need to be compact. The only con to this is that it has to be reset.
The following designs works because pistons can't be pushed by other pistons while extended. And when a piston retracts, it doesn't notify any other pistons that were trying to push it. The piston with the block attached to it is sticky and acts as the sensor. This design has the advantage of a low profile, and also that the quirk it exploits is less "buggy" and less likely to be fixed in the future.
The latter design above can also be extended to an array in a variety of ways, including a one-wide design.
The more compact versions were first discovered in the video below.
The stuck-piston principle can also be used to hide a BUD completely underground, as shown by this video.
Sakii made a video about this, it is 100% functional and it uses quasiconnectivity (BUD-Powering) and the dropper's item inserting feature.
These BUDs stopped working on 1.5 when redstone dust updating bugs were fixed. Kept here for legacy purposes.
Quirks with redstone power propagation can be exploited to make BUD switches. One advantage of these designs is that they are silent.
These two BUD switches take advantage of the strange properties of redstone dust placed on top of glowstone or upside-down slabs. The piece of dust on top of the glowstone or upside-down slabs acts as the sensor. It does only work with the torch facing north/south.
The following less compact design exploits an older bug involving redstone power level decay. The lever is on. The long redstone wire can be routed in various ways, but its length must be exactly the same as in this example. The sensor is the piece of redstone dust on top of the diamond block. That piece of dust does not need to be raised above the rest, but doing so exposes more of its sides to detect block updates.
You can make a BUD switch out of a Redstone Lamp by adding it to another BUD switch which detects the On/Off states of the lamp. This is based on the fact that if you have a redstone signal pointing directly at the redstone lamp, you can go down 1 block to the sides, place a redstone dust there, place a block on top of the placed dust, the lamp will not update. It will only update once something updates adjacent to the redstone lamp. The other BUD detects that the game realizes that the redstone lamp has to be powered, and will update the other BUD.
This BUD stopped working on 1.5 when redstone lamps stopped giving updates when turned off. Now there's another way to make this BUD using tall grass to detect if the lamp was turned off.
This method uses a bug in the Powered Rail, which allows it to be powered without a redstone input. The first known occurrence of this type of BUD is here.
As of 14w25a (with the fix of MC-56541), a burned-out redstone torch can be used as a reliable BUD. Once burned-out, a redstone torch will reset upon an update from any adjacent block. This is the smallest and simplest BUD, only requiring a single torch and redstone dust (plus two repeaters for a solid output signal).
Other devices can be built using the same underlying principle as the BUD switch.
By eliminating the reset mechanism of a BUD switch, it becomes a T-BUD or Toggle-BUD. This device has two stable states, which it switches between when it detects a block update next to the piston. This is equivalent to a normal BUD connected to a T Flip-Flop, but much simpler to build. It is useful for tracking the state of blocks like furnaces, grass/dirt, and beds. However, it has useful capabilities for placing some blocks two blocks away. When placing a piece of Redstone two blocks away, the t-bud activates when it is destroyed only. When placing a repeater two blocks away, the t-bud activates only on the placement. T-BUD in first state.
 T-BUD in second state.
Note: As of Minecraft 1.7.4, the repeater in the picture must be set to a two tick delay. If the repeater is left at one tick, it will work as a BUD.
A CUD is a circuit based on a Comparator that detects comparator updates, such as interactions in a chest, placement of signs or command blocks being changed. It also detects normal block changes and some data changes.
Comparators usually output a signal when an inventory block (such as a chest) with items in it is next to a comparator (or separated from the comparator with a solid block). When the Comparator detects changes, it updates itself which lets the Comparator itself 'notice' that it should not output a current, because the chest is blocked by a block. The piston is only required to automatically reset the CUD.
The earliest known BUD switch is on the Minecraft Forums. [1].
The term "BUD switch" was later coined by YouTuber EthosLab. [2].
