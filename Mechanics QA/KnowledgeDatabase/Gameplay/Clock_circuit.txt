A clock circuit is a redstone circuit which produces a clock signal: a pattern of pulses which repeats itself.
Clock generators are devices where the output is toggling on/off constantly. The customary name x-clock is derived from half of the period length, which is also usually the pulse width. For example, a classic 5-clock will produce the sequence ...11111000001111100000... on the output.
Using only redstone torches and wire, it is possible to create clocks as short as a 4-clock, sometimes by exploiting glitches. Using repeaters or pistons allows easy construction of any clock down to 1-clocks, and other devices can also be pressed into service. There are also special circuits called "rapid pulsers", which produce rapid pulses like a 1 tick clock, but inconsistently due to torches burning out. Indeed, torch based rapid pulses can be too fast for repeaters. Even with repeaters in use, 1-clock signals are difficult to handle in other circuits, as many components and circuits will not respond in timely fashion.
Creating long clocks (more than a few ticks) can be more difficult, as adding repeaters will eventually get unwieldy. However, there are a number of approaches here, which are discussed in a separate section.
Clocks without an explicit toggle can often have one retrofitted, by wiring a lever or other switch to the controlling block of an inverter, or even to a redstone loop. In general, forcing the delay loop high will eventually stop the clock, but the output may not respond until the current pulse has made its way through the loop. Whether the output will be stopped high or low depends on the clock and where in the loop you force it. Another option is to use a lever-controlled piston to open or close one of those loops, using either a solid block to transmit power, or (as of 1.5) a redstone block to supply it.
While it isn't much discussed in the circuit builds below, there is one extra concept which is occasionally important: Phase. The phase of a running clock is the point it has reached in its cycle. For example, at one moment a 5 clock might be 3 ticks into its ON phase, 4 ticks later, it will be 2 ticks into its OFF phase. A long-period clock might be noted as 2 minutes past the start of its ON phase. The exact beginning of a cycle depends on the clock, but it is usually the start of either the OFF phase or the ON phase. For most cases, phase doesn't matter very much, in that you just need pulses every 7 ticks or whatever. However, in-game computing circuits are more demanding, and if you're doing a daily clock, you surely care whether the ON phase is day or night!
Schematic Gallery: Rapid Pulsar.
Redundancy can be used to maintain a 1-clock, even as the torches burn out; the result is the so-called "Rapid Pulsar" (designs X, Y and (vertical) Z). However, the signal may not be consistent.
Device R creates energy in an irregular sequence. It is a variant of the "Rapid Pulsar" design shown above, except that each torch pulses in an irregular pseudo-random pattern as each torch coming on turns the other three (and itself) off. Occasionally torches will burn out for a few seconds (until reset by a block update), during which time other torches blink. As of version 1.5.1, this is likely to favor one pair of torches, such as the east and west torches, which will blink while the others stay dark. Output can be taken anywhere on the circuit.
Although "pulser" is the correct spelling for any general circuit which produces pulses, the traditional spelling of a clock circuit created from short-circuited redstone torches is "rapid pulsar". Random Short Generator.
 Random Short Generator from top.
The basic torch pulser is the oldest clock circuit in Minecraft, simply an odd number of inverters (NOT gates) joined in a loop. The design has been mostly replaced by repeaters, but still works. Design A shows a 5-clock, which is the shortest clock that can easily be made this way. Its pulse length can be extended by adding pairs of torches and/or repeaters. Repeaters can be added into the loop, or can replace any pair of inverters Adding repeaters also allows even-numbered clocks such as a 10-clock. The total interval will be "NOT gate count"+"repeater total delay".
Vertical Torch 5-clock (G).
Compact Torch Loops.
Even torch based 5-clocks can be made more compact, as with designs B and C. However, these have fewer places where repeaters can be inserted without using more space. Using this method, 1-clocks and 3-clocks are possible, but these will be unstable and erratic as the torches will regularly "burn out". As with the basic clock, the compact clocks can be extended by making the chain of inverters longer, or with repeaters. A 5-clock can also be made vertical, as in G.
Torch 4-clocks.
Design D uses a different method to produce a 4-clock. (A 4-clock is the fastest clock of this sort which will not overload the torches).
Design E may be obsolete as of version 1.7. By making use of the North/South Quirk, it was possible to produce a more compact 4-clock with a regular on/off pulse width, as seen in design E. This design uses five torches, but if the stacked torches are pointed north-south, it has a pulse width of 4 ticks.
A clock signal can be generated by introducing a pulse into a loop of repeaters.
2×3×2 (12 block volume)flat, silentclock output: 1 tick on, 1 tick off.
The simplest repeater clock is simply two repeaters connected with redstone dust in a loop.
The tricky part is introducing a 1-tick pulse into the loop. If the pulse is too long, the repeaters will both be permanently powered and the only way to fix it will be to break and then fix the circuit.
A simple solution to this is to use a lever; flipping it on and then off 1 tick later. The most common method seems to be to place a redstone torch next to the clock, then quickly break it. This may take several attempts to do correctly, requiring the clock be broken and fixed between attempts. A more reliable method (shown right) is to place the torch on a powered block (a block of redstone, or any block powered by another torch or other power source) – the torch will be on when placed, but will turn off 1 tick later because it's attached to a powered block. The torch and powered block can then be removed, but stopping the clock later will still require breaking it.
Variations: The dust in front of the repeaters can be replaced with blocks to save on redstone.
Additional repeaters can be added to the loop, increasing the clock period. As long as all the repeaters are kept to a 1-tick delay, the pulse will remain only 1 tick long no matter how many repeaters are added. If the delay is increased on any of the repeaters, the pulse length will increase to match the longest repeater delay.
3×4×2 (24 block volume)flat, silent (while running)clock output: 1 tick on, 1 tick off.
This repeater loop can be switched on and off, by moving a block to complete or break the circuit loop.
How it works: When the lever turns on (t = 0 redstone ticks), the sticky piston begins to extend. At t=1, the torch turns off, but the left repeater stays powered for 1 more tick. At t=1.5, the piston finishes extending and the moved block gets powered by the left repeater. At t=2, the left repeater turns off. At t=2.5, the right repeater begins to output the power passed to it by the block. From here on, it just continues as a 1-clock until the lever is turned off, instantly breaking the loop.
3×4×2 (24 block volume)flat, silentclock output: 1 tick on, 0 ticks off.
This clock produces a 10 Hz clock signal (10 activations per second) consisting of 1-tick on-pulses separated by 0-tick off-pulses (the off-pulse exists, but it is replaced by an on-pulse in the same game tick).
Start the clock with a 1-tick pulse (for example, by placing a torch on a powered block). Stop the clock by breaking a piece of redstone dust. Alternatively, the switchable method described above may be used.
A 10 Hz clock runs too fast for some redstone components to respond to. Command blocks and note blocks can handle the rapid activation. Doors, trapdoors, and fence gates will produce sounds as if being activated and deactivated that quickly, but will appear and act as if constantly activated. Pistons will act as if constantly activated, but the 0-tick off-pulses will produce the flickering appearance of a deactivated piston overlapping the activated piston. Other redstone components will simply act as if constantly powered.
Since the introduction of the repeater, the torch-loop clocks have been generally replaced with torch-repeater loops. In these clocks, most of the delay comes from repeaters, with a single torch to provide oscillation. Such clocks can't be shorter than a 3-clock (or the torch burns out), but they can be extended almost indefinitely (subject to space and material limits). However, once the loop reaches 9-16 repeaters (delays of 36-64 ticks), a TFF or clock multiplier can increase the period more cheaply (and compactly) than adding huge numbers of repeaters.) These examples are all (R+1)-clocks where R is the total repeater delay (that is, they spend R+1 ticks OFF, then the same time ON. All have at least one potential input that will turn the clock OFF within half a cycle (after any current ON-phase passes the output). (Feeding an ON signal into the output will also stop the clock, but of course the output will then be high.) When the power turns off, the clock will automatically restart.
Basic Torch-repeater Clock.
Design A shows a basic loop clock. The repeaters must have a total delay of at least 2 ticks, or the torch will burn out. Powering the block will turn the clock off. As many repeaters as needed can be added, and the loop can be expanded as needed with dust for cornering. The circuit as shown is flat, but large loops can be run onto multiple levels, to cut down on sprawl.
Vertical Extended Clock.
Design E is an extensible vertical clock. Its minimum size is 1×5×4, but it can be extended indefinitely, adding 2 repeaters (up to 8 ticks delay) for each block of extension. As shown, it has a minimum delay of 5 ticks. (This can be reduced to 3 or 4 by replacing repeaters with dust, or by using D instead.) A lever or redstone signal behind the torch stops the clock with output OFF (once any current ON-phase passes the output).
Vertical Compact Clock.
Design D is a tiny vertical clock, a compressed form of E, that can output a 3, 4, or 5-tick cycle.
Earliest Known Publication: June 30, 2011.
The period will be the repeater's delay plus 1, but the repeater must be set to at least 2 ticks or the torch will burn out. This circuit is formally 1×3×3, but is most commonly built as a "V" on the ground, and can easily be buried entirely. A lever on, or redstone signal to, any of the four solid blocks can stop the clock. The torch will be forced "off", while the dust will be lit.
 Output can be taken almost anywhere, with a few exceptions The blocks "crosswise" from the redstone dust (pistons work, but dust or a repeater is likely to jam the clock).
Output can be taken almost anywhere, with a few exceptions The block under the repeater (a repeater or piston next to it will be out-of-phase, and dust won't light).
Output can be taken almost anywhere, with a few exceptions Output from the dust side will be reverse phase.
Comparators can be used to make fast clocks and slow pulsers.
2×2×2 (8 block volume), flat, silentclock output: 1 tick on, 1 tick off.
A subtraction 1-clock toggles on and off every tick. It uses a redstone comparator in subtraction mode, with the output feeding to the comparator's side input.
When the comparator first receives full power, it outputs strength 15 to the block in front of it, which passes the same signal strength to the dust next to it. The signal strength then declines by 1 (to 14) as it moves to the dust next to the comparator. In the next tick, the comparator subtracts 14 from its it 15 input to output only signal strength 1. This is enough to barely power the block and the dust next to the block, but isn't strong enough to reach back to the dust next to the comparator, so on the next tick the comparator subtracts 0 from its input and the cycle starts again.
Only the redstone dust next to the comparator will actually toggle between on and off -- the comparator, the block in front of it, and the dust next to the block only toggle between signal strength 15 and 1. Add additional dust lines to these points to take output from them and allow the signal strength to decline to at least 14 and 0.
A subtraction clock doesn't require full power for input -- it will work even with an input strength as small as 2.
Variations: You can use any full container as the "input" if a power source would be inconvenient in that location (such as right next to the output).
Earliest Known Publication: 9 February 2013.
2×3×2 (12 block volume), flat, silentclock output: 2-5 ticks on, 2-5 ticks off.
With the repeater set to a 1-tick delay, this is a 2-clock (2 ticks on, 2 ticks off). Increase the repeater delay to slow the clock down, or even add additional repeaters. If the input strength is higher than 1, the block behind the repeater can be replaced with redstone dust; if higher than 2, the block in front of the comparator can also be replaced with redstone dust. Output can be taken from anywhere.
A fader pulser is useful for making small clocks with periods less than 15 seconds (for longer periods, hopper clocks can be smaller), but they are difficult to adjust to a precise period. They use a fader circuit (aka "fader loop" – a comparator loop where the signal strength declines with every pass through the loop because it travels through at least one length of two or more redstone dust), renewed by a redstone torch every time it fades out.
1×4×4, 1-wide, silentclock output: 1 tick on, 8 ticks off.
When the input turns off, the redstone torch initially "charges" the fader loop at signal strength 15. There's only one comparator in the loop so each cycle through the loop takes only 1 tick, and the signal strength declines by 2 each time through the loop, so the fader loop will stay charged for 8 ticks. The redstone torch then turns on for only one tick because it short-circuits itself (the torch won't burn-out because it's held off most of the time by the fader circuit).
2×4×2, flat, silentclock output: 2 ticks on, 27 ticks off.
When the input turns off, the redstone torch initially "charges" the fader loop at signal strength 14 at the dust next to the block (the signal strength declined by 1 getting there from the torch). There are two comparators in the loop so each cycle takes 2 ticks, and the signal strength declines by 1 each time through the loop, so the fader loop will stay charged for 28 ticks. One tick later, the redstone torch turns back on, re-powering the fader loop (it stays on for 2 ticks so it overlaps the fader loop's on time by one tick).
Variations: Add more comparators to increase the clock's period, or run one side of the fader loop above the other to reduce the clock's footprint.
A hopper clock (aka "hopper timer") uses the movement of items in hoppers to create a clock signal.
Schematic Gallery: Hopper Clock.
A single-item hopper clock simply moves a single item in a loop of hoppers.
1×3×2 (6 block volume), 1-wide, flat, silentclock output: 4 ticks on, 4 ticks offclock period: 8 ticks.
This clock just bounces an item back and forth between the two hoppers every 4 ticks. This clock runs while the input is off, and turns its clock signal output off when the input turns on.
Technically, the pulse is only 3.5 ticks long (and 4.5 ticks off), but for most purposes this can be treated as a simple 4-clock.
Variations: Another comparator can be added to the other hopper to get another clock signal inverted from the other.
2×(N/2+1)×2 (2×N+4 block volume), flat, silentclock output: 4 ticks on, 4×N-4 ticks offclock period: 4×N ticks.
An n-hopper-loop clock consists of a loop of hoppers moving a single item around which occasionally powers a comparator output. This clock runs while the input is off, and turns its clock signal output off when the input turns on. The clock period will be N × 0.4 seconds, where N is the number of hoppers.
Variations: Other comparators can be added to the other hoppers to get other clock signals out-of-phase with each other.
1×5×2 (10 block volume)clock output: up to 27 minutes off, 4 ticks on.
This clock uses a command block to slow the hopper transfer rate. The exact command will depend on the direction the clock is facing, but for clocks facing the positive X direction it will look something like this: blockdata ~2 ~ ~ {TransferCooldown:X}, where X is the number of game ticks (up to 32,767) to hold the item in the back hopper.
Hoppers usually have an 8 game tick cooldown between transfers (4 redstone ticks). The command block gets activated 2 game ticks after the item enters the back hopper (due to the comparator delay), so setting X to 6 would produce no change. Thus, this clock will have a clock period of 8 game ticks for the front hopper, plus X+2 game ticks for the back hopper, for a total of X+10 game ticks (X/2+5 redstone ticks).
Variations: The output comparator can be replaced with a redstone torch on the command block, producing a signal strength 15 output. An additional command block can then be activated by the torch to set the cooldown of the other hopper to change the pulse length.
Earliest known publication: 2 February 2014.
A multi-item hopper clock achieves longer clock periods by using multiple items in the hoppers, and using a latch to keep the items flowing first one way then the other (rather than just bouncing back and forth between two hoppers).
For most of the multi-item hopper clocks, see the Items Required for Useful Clock Periods table (right).
2×6×2 (24 block volume)flatclock period: 8 ticks to 256 seconds (4m16s).
When the items finish moving in one direction, the empty hopper's comparator turns off, allowing the associated sticky piston to pull the block of redstone to the other hopper, reversing the direction of item movement. The movement of the block of redstone also updates the other sticky piston (which has been powered for a while) causing it to extend and prevent the first sticky piston from extending again when its comparator turns back on.
Powering the hoppers will freeze the clock. Powering one of the blocks or the redstone dust will allow the clock to finish its current cycle before halting.
With a single item in the hoppers, the clock has a period of 7.5 ticks (0.75 seconds). Each additional item adds 8 ticks (0.8 seconds) to the clock period.
There are a number of useful outputs from this clock Clock: A regular on/off clock signal can be taken from one position of the block of redstone. The signal will last for half the clock period.
There are a number of useful outputs from this clock Cycle Off-Pulse: Either block faced by a comparator stays powered most of the time, but will turn off for 3.5 ticks every full cycle (but at half-cycle intervals from each other). The power level of the block may vary, so an output repeater may be needed to keep the power level constant.
There are a number of useful outputs from this clock Cycle Pulse: By placing a torch on one of the blocks powered by a comparator, the off-pulse is turned into a regular 3.5-tick on-pulse, once per cycle.
There are a number of useful outputs from this clock Half-Cycle Off-Pulse: By placing two redstone dust alongside or under the positions of the block of redstone, a 1.5-tick off-pulse is generated every half-cycle when the block of redstone moves.
Variations: For highly precise hopper clocks, the missing half-tick of the first item can be smoothed out with a repeater set to 3 ticks or more. Additional repeaters can change the clock period to something other than a multiple of 8 ticks.
Other configurations are possible. The "1-Wide Compact" version is 1×6×3 (18 block volume). The "1-Wide Tileable" and "1-Wide Upside-Down" versions are both 1×8×3 (24 block volume). [schematics].
Ethonian Hopper Clock (1-Wide Compact).
Ethonian Hopper Clock (1-Wide Tileable).
Ethonian Hopper Clock (1-Wide Upside-Down).
Earliest known publication: 19 January 2013 (note that hopper transfer rates were changed soon after this video was made).
4×6×2 (48 block volume)flat, silentclock period: 8 ticks to 256 seconds (4m16s).
A silent multi-item hopper clock which uses an RS NOR Latch to control the direction of item movement.
Earliest known publication: 19 January 2013.
1×7×5 (35 block volume)1-wide, silentclock period: 8 ticks to 256 seconds (4m16s).
A 1-wide version of the RS NOR Latch hopper clock.
2×4×3 (24 block volume)silentclock period: 8 ticks to 256 seconds (4m16s).
A silent multi-item hopper clock which uses a hopper latch to control the direction of item movement.
Earliest Known Publication: 18 March 2013.
6×6×2 (72 block volume)flat, silentclock period: 1.6 seconds to 512 seconds (8m32s).
A loop of hoppers with multiple items, where each hopper prevents the next hopper from pushing items further until the previous hopper has emptied.
This clock can create a clock signal twice as long as the other multi-item hopper clocks. However, in less space you could build a multiplicative hopper-dropper clock with a clock period hundreds of times longer.
Variations: The "simplified" version uses slightly fewer resources, by simply replacing the repeaters with blocks. The "amputated" version (two "arms" have been removed) only goes up to 256 seconds, but is one-third the size. [schematics].
SethBling's Hopper Clock (Simplified).
SethBling's Hopper Clock (Amputated).
Earliest known publication: 22 January 2013.
A multiplicative hopper clock uses a hopper clock to regulate the item flow of secondary stages to produce very long clock periods (the secondary stages "multiply" the clock period of the first hopper clock).
In most cases, an mhdc will be a better choice (same volume, longer clock periods).
5×6×2 (60 block volume)flatclock period: up to 45 hours.
The repeaters in the middle keep the bottom hopper clock from transferring items except for the brief period when the top hopper clock reverses direction. Thus, the bottom hopper clock will transfer 1 item every time the top hopper clock completes a full cycle (except when the bottom clock reverses direction, when the bottom clock transfers an item after only half a cycle).
The bottom clock will have a clock period of X × (2Y - 1) × 0.8 seconds, where X is the number of items in the top clock and Y is the number of items in the bottom clock (both max. 320 items).
5×6×2 (60 block volume)flatclock period: up to 81.9 hours (3.4 real-life days).
The top part is a regular ethonian hopper clock. Once per cycle, the block of redstone will move left and activate both of the droppers in the second stage (the left dropper is powered directly, while the right dropper is activated because it's next to a powered block: the left dropper). The block of redstone in the second stage ensures that only one dropper will actually push an item, forcing the items to move in one direction until the block of redstone moves.
The dropper clock multiplier will have a clock period of X × Y × 1.6 seconds, where X is the number of items in the hoppers (max. 320 items) and Y is the number of items in the droppers (max. 576 items).
Variations: The most compact version of this circuit (2×6×4 = 48 block volume) can be achieved by moving the first stage above the second stage, and rotated 180°, with a single piece of redstone on one of the droppers.
Each additional dropper stage can multiply the previous stage's clock period by up to 1,152 (twice the number of items a dropper can hold). Adding just one additional dropper stage increases the maximum clock period to over 10 years. In practice, this may only be needed for clock periods measured in weeks or months (longer than the 2-stage version can provide), generally on servers.
A despawn clock uses item despawn timing to create a clock signal.
Simply approaching a despawn clock can interfere with its timing, because any player might accidentally pick up the despawning item.
3×3×2 (18 block volume)clock output: 5 minutes off, 3-7 ticks on.
Start the clock by turning off the input. The torch will turn on, the dropper will drop an item on the pressure plate turning the torch off. After 5 minutes, the item will despawn (disappear) and the pressure plate will deactivate, allowing the torch to turn on, causing the dropper to eject another item onto the pressure plate.
If completely filled with items, the dropper will need to be re-filled every 48 hours, or continually supplied with items from a hopper pipe. Two chickens constrained above a hopper can keep a dropper despawn clock supplied with eggs indefinitely.
Variations: Longer clock periods can be achieved by chaining multiple despawn clocks together, so that each torch triggers the next dropper instead of its own. When chaining multiple despawn clocks, the dropper must be placed so that it is activated only by the previous torch and not the previous pressure plate.
A dispenser can also be used, instead of a dropper, but is slightly more resource-expensive (and not advised with use of eggs).
1×2×2 (4 block volume)clock output: up to 32 minutes off, 1.5 ticks on.
The command block executes a command to summon an item onto the pressure plate. The exact command will vary, but will look something like this.
summon Item ~1 ~ ~ {Age:X,Item:{id:280}}.
The command above summons an item entity (an item in the world, rather than in a player or container inventory), one block in the +x direction (west) from the command block, and specifies that the item has id 280 (it's a stick) and has an "age" of X.
Replace X with a value that determines how long the item should last before despawning: 6000 - 20 × <seconds> (for example, 5940 for a 3-second despawn). Every game tick, this value will increase by 1, and the item will despawn when the value reaches 6,000. Normally, items start at 0 and last 5 minutes (6000 game ticks = 300 seconds = 5 minutes), but setting the item entity's initial Age changes that.
When calculating X for a specific clock period, note that pressure plates stay active for a short period after the item despawns. A wooden pressure plate takes 10 ticks (1 second) to deactivate after the item despawns and a weighted pressure plate takes 5 ticks (0.5 seconds). This also limits how fast a summon despawn clock can be made to run.
X can be negative for clock periods greater than 5 minutes (for example, -6000 for a 10-minute despawn). The maximum time possible is a little over 32 minutes, with X = -32768 (-32768 = 27.3 minutes, plus another 5 minutes to get to +6000).
Start the clock by turning off the input.
A setblock clock works by replacing a block of redstone repeatedly with a command block activated by the block of redstone it places. A /setblock command takes 0.5 ticks to place a block, so these clocks are capable of producing 20 0-tick pulse per second. Only redstone dust, note blocks and other command blocks can activate that rapidly – other mechanism components and repeaters powered by a setblock clock will usually pulse only 5 times per second (like a 1-clock), while comparators may activate once and then stay on or not activate at all.
To prevent the destroyed blocks from dropping items use /gamerule doTileDrops false. To prevent the clock from spamming the chat use /gamerule commandBlockOutput false. To prevent the clock from spamming the server log use /gamerule logAdminCommands false.
Both of these clocks will begin running as soon as they're built. To turn them off, activate the command block setting the block of redstone from a secondary source. To turn them back on, remove the source of secondary activation and replace the block of redstone.
1×1×2 (2 block volume)1-wideclock output: 0-tick pulse every 0.5 ticks.
The command block should have the following command: setblock ~ ~1 ~ minecraft:redstone_block 0 destroy.
Variations: The command block and block of redstone can be configured in any direction.
1×1×3 (3 block volume)1-wide, silentclock output: 0-tick pulse every 0.5 ticks.
Command block "R" should have the following command: setblock ~ ~-1 ~ redstone_block. Command block "S" should have the following command: setblock ~ ~1 ~ stone (or any other solid opaque block which won't cause light updates when replacing the block of redstone).
Variations: The command blocks and block of redstone can be configured in any way that the block of redstone can power both command blocks simultaneously, but command block "S" executes before command block "R" (command blocks which are powered simultaneously activate from lowest coordinate to highest coordinate on each axis).
A fill clock works just like either version of the setblock clock, except it uses the /fill command to setblock an entire volume with blocks of redstone. This allows the clock to activate or power many locations at once without lines of redstone dust requiring support blocks.
Command block "R" should have the following command: fill ~ ~-1 ~ ~4 ~-1 ~ redstone_block. Command block "S" should have the following command: fill ~ ~1 ~ ~4 ~1 ~ stone (or any other solid opaque block which won't cause light updates when replacing the block of redstone). Adjust the commands for the number of blocks of redstone required and the direction they are oriented.
Positions "a" could be command blocks, note blocks, etc.
Pistons can be used to create clocks with a modifiable pulse delay without the use of pulse generators. Pistons can be clocked in a fashion that only leaves the arm extended for the time required to push an adjacent block. However, note that if sticky pistons are regularly used this way (that is, as a 1-clock), they can occasionally "drop" (fail to retract) their block, which will usually stop the clock. (Specifically, if the setup allows for a pulse less than 1 tick long, that will make a sticky piston drop its block. This can be useful, notably for toggles.) Piston clocks in general can be easily turned off or on by a "toggle" input T.
Minimal Piston Clock (A).
Design A requires only a sticky piston and redstone wire, and is controllable. It runs as long as the toggle line (its power source) is on, and turns off when the toggle line is off. Repeaters can be added to increase its delay. If the repeater is replaced with wire, it can be used as a 1-tick clock, but it is prone to "dropping" its block.
Minimal Dual-Piston Clock (B).
Design B shows how to counter block dropping with an optional, non-sticky, piston. The non sticky piston (the bottom one) is needed for the 1 tick clock as a self repair mechanism. It prevents detaching of the moving block from the sticky piston. If using it only for a 1-tick cycle, the repeater (under the extended piston) can be replaced with redstone wire. The toggle line stops the clock on a high signal.
Dual Block Piston Clock (C).
Design C requires two sticky pistons, and can be easily stopped by just setting one side of the redstone high. The repeaters can be indefinitely extended to make a very long delay clock.
Compact Sticky Piston Clock (D).
Design D only needs one sticky piston, but at the repeater must be set to 2 or more ticks. If it is set to one tick, the torch will burn out. The output signal can be taken from any part of the circuit. This design can also be controlled; a high input on the toggle line will stop the clock.
Shamrock Piston Clock (E).
The symmetrical design E shows how non-sticky pistons can also "pass around" a block. Output can be taken from any of the outer redstone loops.
Advanced 1-tick Piston Clock (F).
Design F is an unusual, stable, 1-tick piston clock. Unlike most repeater-based 1-clocks, its signal is fast enough to make a sticky piston reliably toggle its block, dropping and picking it up on alternate pulses. For The clock to work, the block the piston moves must be placed last. The piston will extend and retract very quickly. The output wire appears to stay off, because it's changing state faster than the game visually updates. However, attaching a piston or other device to the output will show that it is working. The clock can be turned off by a redstone signal (e.g. the lever shown on the block below it) to the piston.
Simple 1-tick Piston Clock (G).
Design G is the simplest design and can be used to create rapid clocks. However, it is not controllable, so the only way to stop such a circuit, without adding additional parts, is to break one component (one redstone wire is recommended). Place a block of redstone on a sticky piston, then lay down redstone so that the block powers the piston. Then, once the piston is powered and moves the block, the redstone current will stop, pulling the block back to the original position, which will make the block power the wire again, and so on.
Rail Clock C.
Rail Clock B.
Rail Clock A.
Minecart clocks are simple, easy to build and modify, but are somewhat unreliable. A minecart clock is made by creating a small track rails with one or more powered and detector rails, arranged so that a minecart can run forever either around the track (A), or back and forth from end to end (B, C). (These need not be sloped—properly placed powered rails will let a minecart "bounce" off solid blocks—but you get some extra time as the cart slows down.) A larger vertical track (design C), taken from this video is claimed to produce an exceptionally stable clock. Note that the minecart never quite hits the top of the track.
When running an empty minecart on the loop or back-and-forth, the cart generates redstone signals as it passes over the detector rail(s). Minecart Clocks can be extended or shortened easily by adding and removing track, to adjust the delay between signals. On the flip side, the they are easily disrupted by wandering players or mobs, and a long clock can take a fair bit of space. Also, the exact period is generally not apparent from the design. The need for gold in the booster rails can also be a problem for some players.
Creating very long repeater loops can be very expensive. However, there are several sorts of clocks that are naturally quite long, or can easily be made so, and some are described above Devices can send item entities through the world: Items flowing on a stream, falling through cobwebs, or just waiting to despawn (that's a 5 minute timer provided by the game). Droppers or dispensers, and hoppers with comparators, can be quite useful here. Additional stages added to the multiplicative hopper-dropper clock will each multiply the previous clock period by up to 1,152, quickly increasing the clock period beyond any reasonable use.
 A simple despawn clock is shown above. These do have a couple of liabilities If the pressure plates are not fully enclosed, the trigger item may fall to one side, stopping the clock.
These do have a couple of liabilities The droppers will eventually run out of items. A droppers full of (e.g.) seeds will serve for 48 hours, that is 2 days of real time. If this is insufficient, hoppers and chests can be added to refill the dropper (12 days per chest's worth). Alternately, a pair of chickens can provide enough eggs to keep the clock going indefinitely. A small full-auto melon or pumpkin farm can also serve to fill the hoppers..
However, there are several sorts of clocks that are naturally quite long, or can easily be made so, and some are described above Boats and minecarts can be used with pressure plates or tripwires.
However, there are several sorts of clocks that are naturally quite long, or can easily be made so, and some are described above Pseudoclocks can even be based on plant growth. For these, timing will not be exact, but they can still be useful for getting occasional signals over long periods.
However, there are several sorts of clocks that are naturally quite long, or can easily be made so, and some are described above "Factorial stacking" of clocks: Precise clocks (that is, repeater or repeater-torch loops) with different periods may be connected to an AND gate in order to generate larger periods with much less expense. One way to make a 60-second (600 ticks) would be to use 150 repeaters set on 4-ticks of delay. Or you could connect two clocks with the periods of 24 and 25 ticks (that's 13 repeaters) to an AND gate. Note that if the input clocks' ON state is longer than 1 tick, you'll need to filter them with an Edge Detector or Long Pulse Detector, to prevent overlapping on imperfect syncs. The disadvantages here are The circuitry can be fairly finicky, and you may need a circuit just to start all the clocks simultaneously.
The disadvantages here are The lengths of the sub-clocks need to be chosen to avoid common factors in their periods. This list of the first few prime numbers will be useful: 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103. Any one of your clocks can be a power of a different prime, but they can't share factors or they will occasionally "beat" together, causing an extra or missed pulse.
The disadvantages here are A cycle of 1 minecraft day (24000 game ticks, but 12000 redstone ticks) can be produced by stacking clocks of periods 125, 32, and 3. A multiplier (as described below) may be helpful for the longest of these.
However, there are several sorts of clocks that are naturally quite long, or can easily be made so, and some are described above Then there's the obvious: the Daylight Sensor acts as a clock with a period of one in-game day. The duty cycle can be adjusted by using comparators at different threshold values. Keep in mind that weather may interfere with this, and of course the phase is fixed. The daylight sensor does offer a unique feature: Since it responds to the actual progress of the game day, it will not lose time if its chunk is unloaded. Naturally if its chunk is not loaded, it can't actually activate any circuitry, but when a player comes by later, the clock will still be in sync with the daily cycle. By comparison, suppose that (say) an MHDC with TFFs extending it to 20 minutes is started at dawn, but the chunk is then unloaded. When the player comes back to reload the chunk (say, at dusk), the clock will continue counting its 20 minutes from wherever it left off.
There are also a couple of extension techniques that apply to any clock whatsoever, including irregular pseudoclocks A T flip-flop can be used to double the period of any clock. This will also convert the pulse to have the same length ON and OFF, if it didn't before. (Pseudoclocks won't be completely regularized, but they will be smoothed out).
There are also a couple of extension techniques that apply to any clock whatsoever, including irregular pseudoclocks Latched repeaters allow production of a general clock multiplier, detailed below. This can be used to multiply the period of any clock, and they can be used in series.
Latching Clock multiplier.
This nearly-flat circuit takes a clock input of period P and any pulse length, and outputs as a clock of period N×P, where N is the number of latches used; the output is on for a pulse length of P, and off for the remaining (N-1)×P. N is limited to 12 or so by redstone signal attenuation; however, the design can simply be repeated to multiply the period again, e.g. a 21-multiplier can be made by chaining a 7-multiplier and a 3-multiplier. This can be continued indefinitely, and unlike factorial stacking there is no restriction on the multipliers.
The build is somewhat tricky: The multiplier loop is in fact a torchless repeater-loop clock. This needs to be started separately, before the latches are engaged. The easiest way to start it is probably to add a temporary "startup circuit" starting 4 blocks from the dust part of the loop: Place a power source, then dust and a block for it to power. Finally place a redstone torch on the block, positioned to power the redstone loop. The torch will flash on for one tick before "realizing" it's powered, and this will start the loop as a clock, which will cycle until the latches are powered. This startup rig can then be removed.
The latches are driven by an edge detector which takes a rising edge and produces an OFF pulse; the pulse length must match the delays of the latched repeaters, so that the multiplier's pulse advances one repeater per edge. The delay/pulse length must also be no longer than the input clock, so it's probably best to keep them both at 1. Note that the delays of the latched repeaters are not actually part of the output period; the latches only count off input edges. The circuit's output is ON while the last repeater is lit and lighting the dust loop.
This circuit need not be fed with a regular clock. With any varying input, it will count N rising edges and output HIGH between the (N-1) and N rising edge.
Variations A T flip-flop can be used to "normalize" the pulse to half on/half-off, while doubling the output period. Design L5 from that page is suitable and compact.
Variations By separating the latched repeaters with redstone dust (to read their signals individually), this circuit could be generalized into a "state cycler", which can activate a series of other circuits or devices in order, as triggered by input pulses.
Efficiency: An efficient approach to making very long period clocks is to start with a repeater loop of 9 to 16 repeaters (up to 64 ticks), then add multiplier banks with N of 7, 5, and 3 (bigger is more efficient). Doublings should done with T flipflops, as 2 of those are cheaper and perhaps shorter than a 4-multiplier. A couple of notes Using two 7-multipliers (×49) is slightly more expensive, but shorter, than getting ×50 with 5×5×2, or getting ×48 with 3×4×4 or 6×8;.
A couple of notes An 8-multiplier is slightly more expensive, but shorter, than separate 2- and 4-multipliers. However, two of them are both longer and more expensive than three 4-multipliers.
Earliest Known Publication: 22 October 2012.
